############################
##Docker
############################

Docker != Containers

Agenda:
- Containers vs VMs
- Docker Architecture
  - images/containers/registry/runtime
- Docker Installation
- Docker Workflow
- Docker Commands
- Docker Hub
- Dockerfile
- Docker Compose
- Docker Networking
- Kubernetes


Virtual Machines (HyperVisors) => VMware ESXi / RedHat KVM / MS HyperV / Oracle VirtualBox / Citrix XenServer
 - Type1 and Type2 HyperVisors
Containers => Docker / Mesos / CoreOS / Rkt / Containerd / IBM Container

VMs         => hardware level Virtualization
Containers  => OS/Kernel level Virtualization


Keywords:
 - Containers vs Virtual Machines
 - cGroups and NameSpaces
 - SDN => Software Defined Networking
 - SDDC => Software Defined Data Center
      => Compute Virtualization (ESXi/KVM)
      => Storage Virtualization (SAN, EMC/IBM/NetApp)
      => Networking Virtualization (SDN, NSX/Overlay Network)
 - HCI => Hyper Converged Infrastucture (Nutanix)
      => Cloud-in-a-Box

=================================
Docker Components / Architecture
=================================

Docker host/runtime/deamon
docker images
    - VMware    => Templates
    - Docker    => Images
    - Vagrant   => Boxes
    - AWS       => AMI (Amazon machine Images)
    - OpenStack => Images

docker containers
docker registry
  - https://hub.docker.com/

docker client
  - CLI
  - API


Dockerfile => image => Containers
                    => Registry

=================================
Docker Installation
=================================

https://get.docker.com/

curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh

docker-ce => Community Edition
docker-ee => Enterprise Edition

=================================
Docker Commands
=================================
docker Images     => Lists all images on the docker host
docker search "keyword"
docker pull <imagename:tagname>
  - docker pull ubuntu (same as ubuntu:latest)
docker run -it <imagename>
    -i => interactive
    -t => terminal
    -d => detached / daemonized

    -it  => root user mode
    -itd => detached / daemonized mode

    --name=<customname>

    -p 8080:80

Port forwarding Example:
  docker run -it --name=myweb -p 8787:80 nginx:latest /bin/bash

Volumes
  -v <path-on-host>:<path-on-container>

Volume Example:
docker run -itd --name=myapp -v /root/myapp:/myapp mci

exit      => exit out of the container (container is stopped)
CTRL+P+Q  => exit out of the container (without stopping the container)
docker attach <containerid> or <containername>
docker start <containerid> or <containername>
docker stop <containerid> or <containername>
docker commit <containerid> <newimagename>:<tagname>
docker tag <imagename> <newimagenamge>
docker login
docker push
docker inspect <objectname> or <objectid>

*************
Commands:
*************

attach      Attach local standard input, output, and error streams to a running container
build       Build an image from a Dockerfile
commit      Create a new image from a container's changes
cp          Copy files/folders between a container and the local filesystem
create      Create a new container
diff        Inspect changes to files or directories on a container's filesystem
events      Get real time events from the server
exec        Run a command in a running container
export      Export a container's filesystem as a tar archive
history     Show the history of an image
images      List images
import      Import the contents from a tarball to create a filesystem image
info        Display system-wide information
inspect     Return low-level information on Docker objects
kill        Kill one or more running containers
load        Load an image from a tar archive or STDIN
login       Log in to a Docker registry
logout      Log out from a Docker registry
logs        Fetch the logs of a container
pause       Pause all processes within one or more containers
port        List port mappings or a specific mapping for the container
ps          List containers
pull        Pull an image or a repository from a registry
push        Push an image or a repository to a registry
rename      Rename a container
restart     Restart one or more containers
rm          Remove one or more containers
rmi         Remove one or more images
run         Run a command in a new container
save        Save one or more images to a tar archive (streamed to STDOUT by default)
search      Search the Docker Hub for images
start       Start one or more stopped containers
stats       Display a live stream of container(s) resource usage statistics
stop        Stop one or more running containers
tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
top         Display the running processes of a container
unpause     Unpause all processes within one or more containers
update      Update configuration of one or more containers
version     Show the Docker version information
wait        Block until one or more containers stop, then print their exit codes

=================================
Dockerfile
=================================
INSTRUCTION Argument
FROM
RUN
USER
VOLUME
ENV
ADD
COPY
CMD
EXPOSE

##Sample Dockerfile

FROM nginx:latest
RUN apt-get update
RUN apt-get install tree -y
ENV author sk12k
EXPOSE 80
EXPOSE 443
ADD test.py /tmp/test.py

##Once Dockerfile is written, run following command to create image from it:

docker build -t <imagename:tagname> .


## Dockerfile Reference: https://docs.docker.com/engine/reference/builder/

=================================
Docker Networking
=================================

Docker Network Types:

- bridge Network
- Host Network
- None
- Overlay => SDN (Software Defined Networking) => NSX
- MACVLAN

Network commands

docker network ls
docker network create <networkdriver> <networkname>
docker network inspect <networkname or id>
docker network connect mynet 88e215354f94
docker network disconnect <networkname> <containername>

docker netowrk create host mynet


Network references:
https://docs.docker.com/network/

=================================
Docker Compose
=================================

## Install Docker Compose: https://docs.docker.com/compose/install/

## Work with Docker Compose: https://docs.docker.com/compose/wordpress/


=================================
Docker Swarm
=================================

root@~ $docker swarm init --advertise-addr 206.189.208.63
Swarm initialized: current node (pta5cdp23gvtidredwkdfp9rg) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-20kxkdlfuchyey43fp57cxa09gcyoo4gyymnt3r7k62li68q5p-95cu65ydbcd0krm3upnkjx06h 206.189.208.63:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.

## Run the following on the Worker node to add to cluster:

root@sl-node:[~]$ docker swarm join --token SWMTKN-1-20kxkdlfuchyey43fp57cxa09gcyoo4gyymnt3r7k62li68q5p-95cu65ydbcd0krm3upnkjx06h 206.189.208.63:2377
This node joined a swarm as a worker.

=================================
References
=================================

https://hub.docker.com/editions/community/docker-ce-desktop-windows
https://docs.docker.com/engine/docker-overview/
https://docs.docker.com/v17.09/docker-for-windows/install/
https://curl.haxx.se/docs/manpage.html
https://www.tecmint.com/linux-curl-command-examples/
https://linuxize.com/post/curl-command-examples/





.
